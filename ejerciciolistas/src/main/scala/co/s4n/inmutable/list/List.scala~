package co.s4n.inmutable.list

sealed trait List[+A]
  case object Nil extends List[Nothing]
  case class Const[+A](h: A, t:List[A]) extends List[A]
  
object List {
    // A* seq[A]
    def length[A](lst:List[A]):Int = lst match {
      case Nil => 0
      case Const(h,t) => 1 + length(t)
    }
    def apply[A](as: A*): List[A] = {
      if (as.isEmpty) Nil
      else Const(as.head, apply(as.tail: _*))
    }
  }